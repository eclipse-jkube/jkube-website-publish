{"data":{"allQuickstart":{"nodes":[{"id":"f0f3fc59-ac46-5830-a5b5-b83e862d40d3","artifactId":"eclipse-jkube-sample-custom-enricher-parent","name":"Kit :: Custom Istio Enricher Parent","description":"Eclipse JKube Kit example to build and use a Custom Enricher in a SpringBoot Application. It will demonstrate how you can extend Eclipse JKube Kit's Enricher API to make your own enricher and use it to enrich or generate manifests as per your requirements.","technologies":[],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/kit/custom-istio-enricher/"},{"id":"520432b9-a1bf-58f3-8339-9823de83727a","artifactId":"docker-image","name":"Kit :: Docker Image","description":"Eclipse JKube Kit example showing how to generate a Docker image by using Eclipse JKube in standalone mode.","technologies":[],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/kit/docker-image/"},{"id":"dc64b9d1-1cee-53ff-8f64-4661d6c05ba5","artifactId":"dynamic-docker-image-file-multi-layer","name":"Kit :: Docker Image from Multilayer Dockerfile","description":"Eclipse JKube Kit example showing how to Dynamically generate a Docker image.\n    The generated image contains multiple COPY statements which allows the generation of a multilayered container image.","technologies":[],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/kit/dynamic-docker-image-file-multi-layer/"},{"id":"b0290613-4f16-5652-803e-ae7f793a57b8","artifactId":"helm","name":"Kit :: Helm","description":"Eclipse JKube Kit example showing how to generate a Helm Charts using Eclipse JKube in standalone mode.","technologies":[],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/kit/helm/"},{"id":"0804f96e-3214-5c96-8dd1-8214974f71fa","artifactId":"docker-file-provided","name":"Maven :: Docker File Provided","description":"This quick start showcases how to use Eclipse JKube with external Docker files.\n        There are several profiles highlighting the different configuration modes available.","technologies":["Kubernetes","Spring"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/docker-file-provided/"},{"id":"55060235-c1f0-5465-988f-0f16577b004b","artifactId":"docker-file-simple","name":"Maven :: Dockerfile :: Simple","description":"This quickstart showcases how to use Eclipse JKube with external Docker files without any additional configuration.\n        Docker file mode is automatically selected when a Dockerfile is detected in the project's root directory.","technologies":["Kubernetes","Spring"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/docker-file-simple/"},{"id":"6cc272ac-8e68-5339-abd5-f85c274b6ff6","artifactId":"external-resources","name":"Maven :: External Resources","description":"Simple Spring Boot application which demonstrates how you can use Eclipse JKube's resource fragments.\n    Fragments in `src/main/jkube` directory are detected and picked up by JKube.\n    These fragments are then merged with the JKube generated cluster configuration manifests (YAML).","technologies":["Kubernetes","OpenShift","Spring"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/external-resources/"},{"id":"4249965a-f576-552e-a860-eb9df1919721","artifactId":"helidon-microprofile","name":"","description":"","technologies":["Kubernetes","OpenShift"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/helidon-microprofile/"},{"id":"2f79b9cd-b7c5-5826-b9eb-1eae497421af","artifactId":"helidon-se","name":"","description":"","technologies":["Kubernetes","OpenShift"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/helidon-se/"},{"id":"f990a28d-9017-5c42-b8c4-9ff539bc4ae8","artifactId":"helloworld","name":"Maven :: Hello World","description":"Demo project for getting started with Eclipse JKube.\n    It just prints \"Hello World\" on command line and exits.","technologies":["Kubernetes"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/hello-world/"},{"id":"01d769fd-227e-570f-8207-3e7d376665e7","artifactId":"javaee8-webprofile-liberty","name":"Maven :: JavaEE 8 WebProfile","description":"Demo project for Jakarta EE 8 WebProfile, IBM WebSphere Liberty is used as a Jakarta EE implementation.\n        On Windows or Mac if VirtualBox is used, run the tests using:\n        $ mvn clean verify -DtestProxyHost=192.168.99.100","technologies":["Kubernetes"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/ibm-javaee8-webprofile-liberty/"},{"id":"1b3b214d-1672-5290-9542-bc125f16acc7","artifactId":"karaf-camel-2-log","name":"Maven :: Karaf Camel 2 Log","description":"Simple Apache Camel 2 application on top of Apache Karaf that logs a series of messages to the Server log.\n    The application also generates and processes random orders using Camel routes.","technologies":["Kubernetes","OpenShift","ApacheCamel","ApacheKaraf"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/karaf-camel-2-log/"},{"id":"171f27c3-e092-515a-afd4-98ef7cc63b78","artifactId":"karaf-camel-3-log","name":"Maven :: Karaf Camel 3 Log","description":"Simple Apache Camel 3 application on top of Apache Karaf that logs a series of messages to the Server log.\n    The application also generates and processes random orders using Camel routes.","technologies":["Kubernetes","OpenShift","ApacheCamel","ApacheKaraf"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/karaf-camel-3-log/"},{"id":"a0f117e8-cdcc-5805-838d-19af11c629fb","artifactId":"micronaut","name":"Maven :: Micronaut","description":"Micronaut application featuring REST endpoints (micronaut-http) with validation (micronaut-validation).","technologies":["Kubernetes","OpenShift"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/micronaut/"},{"id":"ff6f0023-3bbe-5ee0-8bba-9396f5bfc90c","artifactId":"micronaut-customized-image","name":"Maven :: Micronaut customized Image","description":"Micronaut application featuring REST endpoints (micronaut-http) with validation (micronaut-validation).\n\n    Includes configuration to enable health check probes (livenessProbe & readinessProbe) using JKube's\n    powerful resource fragments and micronaut-management feature.\n\n    XML based image configuration compatible with OpenShift and Kubernetes.","technologies":["Kubernetes","OpenShift"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/micronaut-customized-image/"},{"id":"d2af8513-0c9b-511d-8734-cf26543e8cf4","artifactId":"openliberty","name":"Maven :: Open Liberty","description":"JAX-RS application deployed with OpenLiberty and Eclipse JKube.\n        The application contains a single endpoint (/hello) that prints 'Hello, World.'.\n        An Arquillian based Integration Test is also included.","technologies":["OpenShift","OpenLiberty"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/openliberty/"},{"id":"fbeb2e9f-89cc-57ff-bac8-3cec8050add4","artifactId":"openliberty-microprofile","name":"Maven :: Open Liberty & MicroProfile","description":"How to integrate Eclipse JKube into an OpenLiberty-MicroProfile project as downloaded from start.microprofile.io.\n    Includes a JAX-RS endpoint, sample CDI injected configuration, and Liveness and Readiness probes.","technologies":["Kubernetes","OpenShift"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/openliberty-microprofile/"},{"id":"034872a5-fd0e-58ba-9aa8-795740d7764d","artifactId":"plugin","name":"Maven :: Plugin","description":"Example to use a JKube Plugin in a Java Application.\n        The","technologies":["Kubernetes"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/plugin/"},{"id":"78a4f290-7bfb-501b-87b2-06056fe1737c","artifactId":"quarkus","name":"Maven :: Quarkus","description":"Quarkus application with a single JAX-RS endpoint.\n    Demonstrates how to package the project using JVM mode or Native image mode.\n    Demonstrates how to build a Quarkus project container with Eclipse JKube's S2I, Docker and JIB build strategies.","technologies":["Kubernetes","OpenShift","Quarkus"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/quarkus/"},{"id":"8c69d157-2ed8-5d45-92bd-7868217ff5f8","artifactId":"quarkus-customized-image","name":"Maven :: Quarkus customized Image","description":"Quarkus application with a single JAX-RS endpoint.\n    Demonstrates how to build a Quarkus container image based on a Red Hat container image private registry.\n    Uses a pull secret from Red Hat Registry Service Accounts to authenticate.","technologies":["OpenShift","Quarkus"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/quarkus-customized-image/"},{"id":"26ea4bda-5c68-51f8-8265-81b7e04e883f","artifactId":"spring-boot","name":"Maven :: Spring Boot Web","description":"Spring Boot Web application with a single @RestController.\n    Shows how to deploy Spring Boot applications to Kubernetes (-Pkubernetes) and OpenShift (-Popenshift) using Eclipse JKube.","technologies":["Kubernetes","OpenShift","Spring"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/spring-boot/"},{"id":"d14e03d9-b464-5a7e-98c8-4a6952addc01","artifactId":"spring-boot-camel-complete","name":"Maven :: Spring Boot - Camel","description":"Spring Boot application with Camel Spring Boot integration.\n    Programmatically (RouteBuilder) declares 2 routes to log messages and process orders.\n    Declares an Apache Camel servlet REST endpoint.","technologies":["Kubernetes","OpenShift","ApacheCamel","Spring"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/spring-boot-camel-complete/"},{"id":"413dce2e-a064-5b79-9369-5722f8a56caa","artifactId":"spring-boot-crd","name":"Maven :: Spring Boot - Custom Resources","description":"Spring Boot application using K8s Custom Resources.\n    Declares a \"Framework\" Custom Resource Definition.\n    Initializes cluster with sample data.\n    Declares an endpoint to consume Custom Resource data stored in the cluster.","technologies":["Kubernetes","OpenShift","Spring"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/spring-boot-crd/"},{"id":"e9737f7f-a8d0-565b-91e0-963df0f85015","artifactId":"spring-boot-dekorate","name":"Maven :: Spring Boot - Dekorate","description":"Spring Boot application with Dekorate integration.\n    Eclipse JKube uses Dekorate generated cluster configuration manifests.","technologies":["Kubernetes","OpenShift","Spring"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/spring-boot-dekorate/"},{"id":"b58e5dae-59e1-50fb-8bb5-ef9a0b87a977","artifactId":"spring-boot-helm","name":"Maven :: Spring Boot - Helm","description":"Spring Boot application with a single REST endpoint.\n    Demonstrates how to generate Helm chart (YAML) files using Eclipse JKube's k8s:helm Maven goal.","technologies":["Kubernetes","OpenShift","Spring"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/spring-boot-helm/"},{"id":"dc5cf0bd-c1a7-540f-aac3-2bb5f5d80f6b","artifactId":"spring-boot-watch","name":"Maven :: Spring Boot Watch","description":"Spring Boot application with a single REST endpoint.\n    Demonstrates how to watch for source changes using Eclipse JKube's k8s:watch goal.\n    Application gets live reloaded in the cluster each time the project is recompiled (mvn package).","technologies":["Kubernetes","Spring"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/spring-boot-watch/"},{"id":"d6658bfe-e1c0-5e9d-bf68-72899c9bf00b","artifactId":"eclipse-jkube-sample-spring-boot-jib","name":"Maven :: Spring Boot JIB","description":"Spring Boot application with a single REST endpoint.\n        Demonstrates how to build a project using Eclipse JKube JIB build strategy.","technologies":["Kubernetes","Spring"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/spring-boot-with-jib/"},{"id":"5f84f68f-8cd3-5c66-9b4f-d0b237d4b403","artifactId":"thorntail","name":"Maven :: Thorntail","description":"Java web application with a single JAX-RS endpoint packaged with Thorntail.","technologies":["Kubernetes","OpenShift","Thorntail"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/thorntail/"},{"id":"ba02c050-9336-5d87-8dbc-03d2d7708767","artifactId":"tomee","name":"Maven :: Tomee","description":"Tomee deployment template for JKube","technologies":["Kubernetes"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/tomee/"},{"id":"8fc5d317-87bb-579c-839f-963920d52062","artifactId":"uberjar","name":"Maven :: Uber Jar","description":"Demo project for getting started with Eclipse JKube.\n    It just prints \"Hello World\" on command line and exits.","technologies":["Kubernetes"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/uber-jar/"},{"id":"cb0b8a1e-7023-54d9-a075-b99f36362d71","artifactId":"vertx","name":"Maven :: Vertx Web","description":"Eclipse Vert.x example application declaring a Simple AbstractVerticle.","technologies":["Kubernetes","OpenShift","Vertx"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/vertx/"},{"id":"5046adc6-558a-588c-a703-447be31d6e31","artifactId":"vertx-4","name":"Maven :: Vertx 4 Web","description":"Eclipse Vert.x 4 example application declaring a Simple AbstractVerticle.","technologies":["Kubernetes","OpenShift","Vertx"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/vertx4/"},{"id":"5192d8ac-da6f-5a42-aff0-ea2f7473fb56","artifactId":"webapp","name":"Maven :: Webapp","description":"Java Web Application with a static index.html resource.\n    Demonstrates how to create a container image with an embedded Apache Tomcat server using Eclipse JKube.","technologies":["Kubernetes","OpenShift"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/webapp/"},{"id":"a8104be8-b753-5914-adf9-b34a70f0d39d","artifactId":"webapp-jetty","name":"Maven :: Webapp Jetty","description":"Java Web Application with a static index.html resource.\n    Demonstrates how to create a container image with an embedded Eclipse Jetty server using Eclipse JKube.\n    Jetty is used instead of Apache Tomcat because there is a Jetty specific configuration file (jetty-logging.properties).\n    Eclipse JKube detects this file and chooses a Jetty specific base container image.","technologies":["Kubernetes","OpenShift"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/webapp-jetty/"},{"id":"08e2ebe5-1f38-5ded-abb4-95bba5f3fd3a","artifactId":"jkube-maven-sample-webapp-wildfly","name":"Maven :: Webapp :: Wildfly","description":"Java Web Application with a static index.html resource.\n    Demonstrates how to create a container image with an embedded WildFly server using Eclipse JKube.\n    WildFly is used instead of Apache Tomcat because there is a WildFly specific plugin configuration.\n    Eclipse JKube detects this plugin and chooses a WildFly specific base container image.","technologies":["Kubernetes","OpenShift"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/webapp-wildfly/"},{"id":"23ee7058-b084-5632-aa8d-197df32484bd","artifactId":"webapp-wildfly-datasource","name":"Maven :: Webapp :: Wildfly :: Datasource","description":"Java Web Application that uses an embedded h2 database.\n    Demonstrates how to create a container image with an embedded WildFly server using Eclipse JKube.\n    WildFly is used instead of Apache Tomcat because there is a WildFly persistence.xml and -ds.xml configuration.\n    Eclipse JKube detects this file and chooses a WildFly specific base container image.","technologies":["Kubernetes","OpenShift"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/webapp-wildfly-datasource/"},{"id":"260eef06-4578-55bf-bd76-c3987e8b9fb1","artifactId":"wildfly-jar","name":"Maven :: Wildfly JAR","description":"Java web application with a single JAX-RS endpoint packaged with WildFly Jar Maven Plugin.","technologies":["Kubernetes","OpenShift"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/wildfly-jar/"},{"id":"eea78d7b-2789-5078-b88d-3a90556c08e2","artifactId":"wildfly-jar-slim","name":"Maven :: Wildfly JAR :: Slim","description":"Java web application with a single JAX-RS endpoint packaged with WildFly Jar Maven Plugin.","technologies":["Kubernetes","OpenShift"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/wildfly-jar-slim/"},{"id":"d8e92d51-4e49-55d6-a753-98a7f9c7b68e","artifactId":"xml-config","name":"Maven :: XML configuration","description":"Apache Camel application.\n    Demonstrates how to configure Eclipse JKube build and resource properties using XML elements in the project's pom.xml plugin configuration.","technologies":["Kubernetes","ApacheCamel"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/xml-config/"},{"id":"b0f9e1cc-7c39-58c3-95ec-2e3614b17c38","artifactId":"yaml","name":"Maven :: Yaml","description":"Example showing how to use Eclipse JKube Maven Plugins to deploy cluster configuration YAML files.\n    Example with Yaml only resources","technologies":["Kubernetes"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/yaml-only/"},{"id":"8083fab0-707d-55a1-8927-f78e6b4e7208","artifactId":"jkube-maven-sample-zero-config","name":"Maven :: Zero-Config","description":"Spring Boot application with a single REST endpoint.\n    Demonstrates Eclipse JKube Zero Configuration capabilities.\n    All configurations to create the container image and resource manifests are inferred from the project and its dependencies.","technologies":["Kubernetes","OpenShift","Spring"],"url":"https://github.com/eclipse/jkube/tree/master/quickstarts/maven/zero-config/"}]}}}